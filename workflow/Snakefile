'''Snakefile for MitoImpute Version 0.2'''
# snakemake -j --use-conda

configfile: 'config/config.yaml'
SAMPLE = config['SAMPLE']
DATAIN = config['DATAIN']
DATAOUT = config['DATAOUT']
REFDATA = config['REFDATA']
INFOCUT = config['INFOCUT']
ITER = config['ITER']
BURNIN = config['BURNIN']
KHAP = config['KHAP']

BPLINK = ["bed", "bim", "fam"]
PLINK = ["map", "ped"]
OXFORD = ["gen", "sample"]

rule all:
    input:
        expand("{dataout}/{sample}/Imputed_{sample}.{ext}", ext=BPLINK, sample=SAMPLE, dataout=DATAOUT),
        expand("{dataout}/{sample}/Imputed_{sample}.{ext}", ext=PLINK, sample=SAMPLE, dataout=DATAOUT),
        expand("{dataout}/{sample}/Imputed_{sample}.vcf", sample=SAMPLE, dataout=DATAOUT),
        expand("{dataout}/{sample}/stats/{sample}_Info.png", sample=SAMPLE, dataout=DATAOUT),
        expand("{dataout}/{sample}/stats/{sample}_InfoHiMC.png", sample=SAMPLE, dataout=DATAOUT),
        expand("{dataout}/{sample}/stats/{sample}_Haplogroups.txt", sample=SAMPLE, dataout=DATAOUT),
        expand("{dataout}/{sample}/stats/{sample}_HaplogroupMatch.png", sample=SAMPLE, dataout=DATAOUT)

rule SexFam:
    input: expand("{datain}/{{sample}}.fam", datain=DATAIN)
    output: temp("{dataout}/{sample}/{sample}_maleOnly.fam")
    log:
        'logs/{dataout}/SexFam:{sample}.stdout'
    shell:
        """
        (awk '{{$5 = "1"; print}}' {input} > {output}) &> {log}
        """

## Extract SNPs on mitochondrial genome (26)
## Remove SNPs where allels are non-ACTG
rule chrMT:
    input:
        bplink = expand("{datain}/{{sample}}.{ext}", ext=BPLINK, datain=DATAIN),
        fam = "{dataout}/{sample}/{sample}_maleOnly.fam"
    output:
        temp(multiext("{dataout}/{sample}/chrMT_{sample}", ".bed", ".bim", ".fam"))
    params:
        inFile = lambda wildcards, input: input[0][:-4],
        prefix = lambda wildcards, output: output[0][:-4]
    log:
        'logs/{dataout}/chrMT:{sample}.log',
    conda:
        "envs/plink.yaml"
    shell:
        """
        plink --bfile {params.inFile} --fam {input.fam} \
        --chr 26 --output-chr 26 --snps-only just-acgt \
        --keep-allele-order --make-bed --out {params.prefix} &> {log}
        """

## Check if mtSNPs are mapped to rCRS, if not liftover
rule yri2rcrs_flip:
    input:
        referenceSnps = expand('{RefData}/ReferenceSNPs.txt', RefData = REFDATA),
        bim = "{dataout}/{sample}/chrMT_{sample}.bim"
    output:
        bim = temp("{dataout}/{sample}/chrMT_{sample}_rcrsFlipped.bim")
    # log:
    #     'logs/{dataout}/yri2rcrs_flip:{sample}.log'
    conda:
        "envs/r.yaml"
    script:
        "scripts/yri_to_rcrs_flip.R"
        # "&> {log}"

## Convert sample binary plink files to oxford format
rule bplink2oxford:
    input:
        bplink = expand("{{dataout}}/{{sample}}/chrMT_{{sample}}.{ext}", ext=BPLINK),
        bim = "{dataout}/{sample}/chrMT_{sample}_rcrsFlipped.bim"
    output:
        temp(multiext("{dataout}/{sample}/{sample}", ".gen", ".sample"))
    params:
        inFile = lambda wildcards, input: input[0][:-4],
        prefix = lambda wildcards, output: output[0][:-4]
    log:
        'logs/{dataout}/bplink2oxford:{sample}.log',
    conda:
        "envs/plink.yaml"
    shell:
        """
        plink --bfile {params.inFile} --bim {input.bim} \
        --recode oxford --keep-allele-order --out {params.prefix} &> {log}
        """

## Convert sample binary plink files to .map/.ped files
rule bplink2plink:
    input:
        bplink = expand("{{dataout}}/{{sample}}/chrMT_{{sample}}.{ext}", ext=BPLINK),
        bim = "{dataout}/{sample}/chrMT_{sample}_rcrsFlipped.bim"
    output:
        multiext("{dataout}/{sample}/{sample}_typedOnly", ".map", ".ped")
    params:
        inFile = lambda wildcards, input: input[0][:-4],
        prefix = lambda wildcards, output: output[0][:-4]
    log:
        'logs/{dataout}/bplink2plink:{sample}.log',
    conda:
        "envs/plink.yaml"
    shell:
        """
        plink --bfile {params.inFile} --bim {input.bim} \
        --recode --keep-allele-order --out {params.prefix} &> {log}
        """

## Use Impute to impute mtSNPs
rule Impute2:
    input:
        m = expand('{RefData}/MtMap.txt', RefData=REFDATA),
        h = expand('{RefData}/ReferencePanel.hap.gz', RefData=REFDATA),
        l = expand('{RefData}/ReferencePanel.legend.gz', RefData=REFDATA),
        g = "{dataout}/{sample}/{sample}.gen",
        sample = "{dataout}/{sample}/{sample}.sample",
    output:
        "{dataout}/{sample}/{sample}_imputed",
        "{dataout}/{sample}/{sample}_imputed_samples",
        "{dataout}/{sample}/{sample}_imputed_info"
    params:
        prefix = lambda wildcards, output: output[0],
        iter = ITER,
        burnin = BURNIN,
        khap = KHAP
    log:
        'logs/{dataout}/Impute2:{sample}.log',
    conda:
        "envs/impute2.yaml"
    shell:
        """
        impute2 -chrX -m {input.m} -h {input.h} -l {input.l} -g {input.g} \
        -sample_g {input.sample} -int 1 16569 -Ne 20000 -o {params.prefix} \
        -iter {params.iter} -burnin {params.burnin} -k_hap {params.khap} &> {log}
        """

## Change MT chromsome name to '26'
rule FixChromName:
    input:
        InFile = "{dataout}/{sample}/{sample}_imputed"
    output:
        OutFile = "{dataout}/{sample}/{sample}_imputed_ChromFixed"
    conda:
        "envs/plink.yaml"
    shell:
        """
        awk '{{$1 = "26"; print}}' {input.InFile} > {output.OutFile}
        """

## Convert Oxford files to binary Plink files
rule oxford2bed:
    input:
        gen = "{dataout}/{sample}/{sample}_imputed_ChromFixed",
        sample = "{dataout}/{sample}/{sample}_imputed_samples"
    output:
        multiext("{dataout}/{sample}/Imputed_{sample}", ".bed", ".bim", ".fam")
    params:
        prefix = lambda wildcards, output: output[0][:-4]
    log:
        'logs/{dataout}/oxford2bed:{sample}.log',
    conda:
        "envs/plink.yaml"
    shell:
        """
        plink --gen {input.gen} --sample {input.sample} --hard-call-threshold 0.49 \
        --keep-allele-order --make-bed --output-chr 26 --out {params.prefix} &> {log}
        """

## Convert Oxford files to .map/.ped files
rule oxford2ped:
    input:
        gen = "{dataout}/{sample}/{sample}_imputed_ChromFixed",
        sample = "{dataout}/{sample}/{sample}_imputed_samples"
    output:
        multiext("{dataout}/{sample}/Imputed_{sample}", ".map", ".ped")
    params:
        prefix = lambda wildcards, output: output[0][:-4]
    log:
        'logs/{dataout}/oxford2ped:{sample}.log',
    conda:
        "envs/plink.yaml"
    shell:
        """
        plink --gen {input.gen} --sample {input.sample} --hard-call-threshold 0.49 \
        --keep-allele-order --output-chr 26 --recode --out {params.prefix} &> {log}
        """

## Convert Oxford files to .vcf files
rule oxford2vcf:
    input:
        gen = "{dataout}/{sample}/{sample}_imputed_ChromFixed",
        sample = "{dataout}/{sample}/{sample}_imputed_samples"
    output:
        "{dataout}/{sample}/Imputed_{sample}.vcf"
    params:
        prefix = lambda wildcards, output: output[0][:-4]
    log:
        'logs/{dataout}/oxford2vcf:{sample}.log',
    conda:
        "envs/plink.yaml"
    shell:
        """
        plink --gen {input.gen} --sample {input.sample} --hard-call-threshold 0.49 \
        --keep-allele-order --output-chr 26 --recode vcf --out {params.prefix} &> {log}
        """

rule plots:
    input:
        typ_map = "{dataout}/{sample}/{sample}_typedOnly.map",
        typ_ped = "{dataout}/{sample}/{sample}_typedOnly.ped",
        imp_map = "{dataout}/{sample}/Imputed_{sample}.map",
        imp_ped = "{dataout}/{sample}/Imputed_{sample}.ped",
        imp_info = "{dataout}/{sample}/{sample}_imputed_info",
    output:
        InfoPlot = "{dataout}/{sample}/stats/{sample}_Info.png",
        InfoHimcPlot = "{dataout}/{sample}/stats/{sample}_InfoHiMC.png",
        haplgroups = "{dataout}/{sample}/stats/{sample}_Haplogroups.txt",
        HaplogroupPlot = "{dataout}/{sample}/stats/{sample}_HaplogroupMatch.png"
    params:
        output_dir = "{dataout}/{sample}/stats",
        sample = '{sample}',
        info_cut = INFOCUT,
    conda:
        'envs/r.yaml'
    script:
        'scripts/plots.R'
