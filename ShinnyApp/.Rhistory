##  Munge population dataframes from 1000 genomes
base_pops <- base_pops.raw %>%
dplyr:::rename(IID = `Individual ID`) %>%
select(IID, Population) %>%
mutate(SuperPopulation = recode(base_pops.raw$Population, GBR = 'EUR', FIN = 'EUR', CHS = 'EAS', PUR = 'AMR', CDX = 'EAS', CLM = 'AMR', IBS = 'EUR', PEL = 'AMR', PJL = 'SAS', KHV = 'EAS', ACB = 'AFR', GWD = 'AFR', ESN = 'AFR', BEB = 'SAS', MSL = 'AFR', STU = 'SAS', ITU = 'SAS', CEU = 'EUR', YRI = 'AFR', CHB = 'EAS', JPT = 'EAS', LWK = 'AFR', ASW = 'AFR', MXL = 'AMR', TSI = 'EUR', GIH = 'SAS')) %>%
mutate(cohort = '1kgenomes')
base_pops
##  Munge target population dataframes
target_pops <- target_pops.raw %>%
select(X2) %>%
rename(IID = X2) %>%
mutate(Population = params$Sample, SuperPopulation = params$Sample, cohort = params$Sample, Population_2 = params$Sample)
target_pops
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = params$rwd)
## ---- Load Required R packages ---- ##
library(ggplot2)    ## For ploting
library(ggforce)    ## for zoom plots
library(GGally)     ## For Pairs plot
library(tidyverse)  ## for data wrangling
library(plotly)     ## For 3d interactive scatter plots
library(gridExtra)
##  Standarize varibles to have a mean of 0 and sd of 1
zscore = function(x){(x - mean(x, na.rm = T)) / sd(x, na.rm = T)}
##---- Read in Data ----##
# PCA file from plink
pca.raw <- as.tibble(read_delim(params$Path_eigenvec, delim = " ", col_names = F))
# population data file from 1000 genomes
base_pops.raw <- read_tsv(params$PATH_BasePops)
# population data from target set
target_pops.raw <- read_delim(params$Path_TargetPops, delim = " ", col_names = F)
# egien values
eigenval.raw <- read_table(params$Path_eigenval, col_names = F)
colnames(pca.raw) <- c('FID', 'IID', paste0('PC', seq(1, ncol(pca.raw)-2, 1)))
##  standardize PC to a z-score
pca <- mutate_at(pca.raw, c('PC1', 'PC2', 'PC3', 'PC4', 'PC5', 'PC6', 'PC7', 'PC8', 'PC9', 'PC10'), zscore)
##  Proportion of variance explained by each PC in PCA
eigenval <- eigenval.raw %>%
mutate(PC = paste0('PC', 1:10)) %>%
rename(eigenval = X1) %>%
mutate(PC = factor(PC, levels = paste0('PC', 1:10))) %>%
mutate(PVE = round(eigenval / sum(eigenval), 3))
##  Munge population dataframes from 1000 genomes
base_pops <- base_pops.raw %>%
dplyr:::rename(IID = `Individual ID`) %>%
select(IID, Population) %>%
mutate(SuperPopulation = recode(base_pops.raw$Population, GBR = 'EUR', FIN = 'EUR', CHS = 'EAS', PUR = 'AMR', CDX = 'EAS', CLM = 'AMR', IBS = 'EUR', PEL = 'AMR', PJL = 'SAS', KHV = 'EAS', ACB = 'AFR', GWD = 'AFR', ESN = 'AFR', BEB = 'SAS', MSL = 'AFR', STU = 'SAS', ITU = 'SAS', CEU = 'EUR', YRI = 'AFR', CHB = 'EAS', JPT = 'EAS', LWK = 'AFR', ASW = 'AFR', MXL = 'AMR', TSI = 'EUR', GIH = 'SAS')) %>%
mutate(cohort = '1kgenomes')
##  Munge target population dataframes
target_pops <- target_pops.raw %>%
select(X2) %>%
rename(IID = X2) %>%
mutate(Population = params$Sample, SuperPopulation = params$Sample, cohort = params$Sample, Population_2 = params$Sample)
target_pops
##  Munge PCA, base pop and target pop
pca <- target_pops %>%
mutate(IID = as.character(IID)) %>%
bind_rows(base_pops) %>%
right_join(pca, by = 'IID')
##  Relevel Population Factor for ploting
pca$Population_2 <- factor(pca$Population, level = c(params$Sample, 'GBR', 'FIN', 'IBS', 'CEU', 'TSI', 'PUR', 'CLM', 'PEL', 'MXL', 'CHS', 'CDX', 'KHV', 'CHB', 'JPT', 'PJL', 'BEB', 'STU', 'ITU', 'GIH', 'GWD', 'ESN', 'MSL', 'YRI', 'LWK', 'ASW', 'ACB'))
PC.inc <-  findInterval(0.95, cumsum(eigenval$PVE)) + 1
## ---- Plot scree plot of proportion of varaince explained by Principal components ---- ##
p1 <- ggplot(data = eigenval, aes(x = PC, y = PVE, group = factor(1))) +
geom_point(colour = '#377EB8') + geom_path(colour = '#377EB8') +
labs(x = 'Principal Components') +
theme_bw() + ylim(0,1)
p2 <- ggplot(data = eigenval, aes(x=PC, y=cumsum(PVE), group = factor(1))) +
geom_point(colour = '#377EB8') + geom_path(colour = '#377EB8') +
labs(x = 'Principal Components', y = 'cumulative PVE') +
theme_bw() + ylim(0,1) + geom_hline(yintercept = 0.95, colour = '#E41A1C', linetype = 2)
grid.arrange(p1, p2, ncol = 2)
##---- Plot pairs plots ----##
GGally::ggpairs(pca, columns = paste0('PC', 1:PC.inc), aes(colour = SuperPopulation, shape = cohort)) +  theme_bw()
warnings()
pca
tail(pca)
target_pops
pca.raw
tail(pca.raw)
library(shiny); runApp('Dropbox/Research/PostDoc-MSSM/3_mitoWAX/3_Scripts/ShinnyApp/ShinnyApp.R')
my_data <- readRDS("~/Dropbox/Research/PostDoc-MSSM/3_mitoWAX/3_Scripts/ShinnyApp/mttest.rds")
my_data
runApp('Dropbox/Research/PostDoc-MSSM/3_mitoWAX/3_Scripts/ShinnyApp/ShinnyApp.R')
runApp('Dropbox/Research/PostDoc-MSSM/3_mitoWAX/3_Scripts/ShinnyApp/ShinnyApp.R')
runApp('Dropbox/Research/PostDoc-MSSM/3_mitoWAX/3_Scripts/ShinnyApp/ShinnyApp.R')
typ.map <- list.files(path = "~/Dropbox/MitoImpute/STRANDS", recursive = TRUE, pattern = "*b37.map")
typ.ped <- list.files(path = "~/Dropbox/MitoImpute/STRANDS", recursive = TRUE, pattern = "*b37.ped")
typ.map
typ.ped
info <- list.files(path = "~/Dropbox/MitoImpute/STRANDS", recursive = TRUE, pattern = "*_info")
info
imp.ped
imp.ped <- list.files(path = "~/Dropbox/MitoImpute/STRANDS", recursive = TRUE, pattern = "*imputed.ped")
imp.map <- list.files(path = "~/Dropbox/MitoImpute/STRANDS", recursive = TRUE, pattern = "*imputed.map")
imp.ped
imp.map
typ.map <- list.files(path = "~/Dropbox/STRANDS", recursive = TRUE, pattern = "*b37.map")
typ.ped <- list.files(path = "~/Dropbox/STRANDS", recursive = TRUE, pattern = "*b37.ped")
info <- list.files(path = "~/Dropbox/STRANDS", recursive = TRUE, pattern = "*_info")
imp.ped <- list.files(path = "~/Dropbox/STRANDS", recursive = TRUE, pattern = "*imputed.ped")
imp.map <- list.files(path = "~/Dropbox/STRANDS", recursive = TRUE, pattern = "*imputed.map")
typ.map
typ.ped
info
imp.ped
imp.map
?seperate
?separate
separate(typ.map, sep = '/')
typ.map %>% as.tibble %>% separate(sep = '/')
typ.map %>% as.tibble() %>% separate(sep = '/')
typ.map %>% as.tibble()
typ.map %>% as.tibble() %>% separate(value, sep = '/')
typ.map %>% as.tibble() %>% separate(value, c('platform', 'file'), sep = '/')
typ <- typ.map %>% as.tibble() %>% separate(value, c('platform', 'file'), sep = '/')
imp <- imp.map %>% as.tibble() %>% separate(value, c('platform', 'file'), sep = '/')
imp
anti_join(typ, imp, by = 'platform')
10/36000
install.packages('taRifx')
library(HiMC); data(nodes)
##  Function
source('~/Dropbox/Research/PostDoc/MitoWax/3_Scripts/import_snps.R', chdir = TRUE)
typ.map
setwd("~/Dropbox/STRANDS")
test <- mapply(generate_snp_data, typ.map, typ.ped, SIMPLIFY = F)
head(test)
typ.dat <- mapply(generate_snp_data, typ.map, typ.ped, SIMPLIFY = F)
info.dat <- lapply(info, read_tsv)
info.dat <- lapply(info, read_delim, delim = " ")
info.dat
info
info.names <- info %>% as.tibble() %>% separate(value, c('platform', 'file'), sep = '/')
info.names
names(info.dat) <- info.names$platform
head(info.dat)
typ.names <- typ.map %>% as.tibble() %>% separate(value, c('platform', 'file'), sep = '/')
imp.names <- imp.map %>% as.tibble() %>% separate(value, c('platform', 'file'), sep = '/')
imp.dat <- mapply(generate_snp_data, imp.map, imp.ped, SIMPLIFY = F)
head(imp.dat)
imp.dat[[6]]
dim(imp.dat[[6]])
dim(imp.dat[[7]])
dim(imp.dat[[1]])
dim(imp.dat[[101]])
?pblapply
install.packages('pbapply')
library(pbapply)
test <- pbapply(info.dat, function(x){
out <- mutate(x, info_comb = ifelse(info_type0 == -1, info,info_type0 ))
out <- mutate(out, himc = ifelse(position %in% c(825, 1018, 1438, 1719, 1736, 2092, 3505, 3552, 3594, 4580, 4769, 4917, 4977, 5178, 5442, 6371, 7028, 8251, 8414, 8468, 8703, 9042, 9055, 9347, 9950, 10115, 10398, 10398, 10400, 10550, 11177, 11251, 11947, 12007, 12308, 12705, 13263, 13368, 13506, 13708, 13789, 14178, 14318, 14470, 14560, 14668, 14766, 15043, 15326, 15452, 15535, 16111, 16189, 16391), 'yes', 'no'))
out
})
?pbapply
test <- pblapply(info.dat, function(x){
out <- mutate(x, info_comb = ifelse(info_type0 == -1, info,info_type0 ))
out <- mutate(out, himc = ifelse(position %in% c(825, 1018, 1438, 1719, 1736, 2092, 3505, 3552, 3594, 4580, 4769, 4917, 4977, 5178, 5442, 6371, 7028, 8251, 8414, 8468, 8703, 9042, 9055, 9347, 9950, 10115, 10398, 10398, 10400, 10550, 11177, 11251, 11947, 12007, 12308, 12705, 13263, 13368, 13506, 13708, 13789, 14178, 14318, 14470, 14560, 14668, 14766, 15043, 15326, 15452, 15535, 16111, 16189, 16391), 'yes', 'no'))
out
})
head(test)
MTtyp.classifications <- pblapply(typ.dat, HiMC::getClassifications)
head(MTtyp.classifications)
lapply(MTtyp.classifications, head)
# assign haplogroups
MTimp.classifications <- pblapply(imp.dat, HiMC::getClassifications)
##===============================##
##  Readin in wgs plink files
##===============================##
wgs.map <- '~/Dropbox/src/MitoImpute/DerivedData/ThousandGenomes/chrMT_1kg_norm_decomposed_firstAlt.map'
wgs.ped <- '~/Dropbox/src/MitoImpute/DerivedData/ThousandGenomes/chrMT_1kg_norm_decomposed_firstAlt.ped'
wgs.dat <- generate_snp_data(wgs.map, wgs.ped)
imp.dat
imp.dat <- lapply(imp.dat, function(x){
out <- x[,-c(grep("\\<189\\>", colnames(x)), grep("\\<16183\\>", colnames(x)))]
out
})
head(imp.dat)
MT_haps <- pblapply(MTtyp.classifications, function(x){
x %>%
left_join(MTwgs.classifications, by = 'Individual', suffix = c("_typ", "_wgs")) %>%
as.tibble()
})
# Assign haplogorups
MTwgs.classifications <- HiMC::getClassifications(wgs.dat)
MT_haps <- pblapply(MTtyp.classifications, function(x){
x %>%
left_join(MTwgs.classifications, by = 'Individual', suffix = c("_typ", "_wgs")) %>%
as.tibble()
x
})
head(MT_haps)
MT_haps
head(MT_haps[[1]])
MTtyp.classifications[[1]]
MTwgs.classifications
MTwgs.classifications <- as.tibble(MTwgs.classifications)
MTwgs.classifications
test <- lapply(MTtyp.classifications, as.tibble)
test
MTtyp.classifications <- lapply(MTtyp.classifications, as.tibble)
MTtyp.classifications[[1]]
MTwgs.classifications
MTtyp.classifications[[2]]
MTtyp.classifications[[3]]
# Join Typed and WGS classifications
MT_haps <- lapply(MTtyp.classifications, function(x){
x %>%
left_join(MTwgs.classifications, by = 'Individual', suffix = c("_typ", "_wgs")) %>%
as.tibble()
x
})
MT_haps[[1]]
MT_haps[[2]]
MT_haps[[3]]
MT_haps <- lapply(MTtyp.classifications, function(x){
out <- x %>%
left_join(MTwgs.classifications, by = 'Individual', suffix = c("_typ", "_wgs")) %>%
as.tibble()
out
})
MT_haps[[1]]
MT_haps[[2]]
MT_haps[[3]]
MT_haps
# Join Typed and WGS classifications
MT_haps.out <- lapply(MTtyp.classifications, function(x){
out <- x %>%
left_join(MTwgs.classifications, by = 'Individual', suffix = c("_typ", "_wgs")) %>%
as.tibble()
out
})
names(MT_haps.out) <- typ.names$platform
MT_haps.out
names(imp.dat) <- imp.names$platform
imp.dat <- lapply(imp.dat, as.tibble)
imp.dat
library(readxl)
mbi <_ read_xlsx("/Users/sheaandrews/Dropbox/Research/PostDoc-MSSM/5_MBI/ADNI MBI Data.xlsx", sheet = 1)
mbi <- read_xlsx("/Users/sheaandrews/Dropbox/Research/PostDoc-MSSM/5_MBI/ADNI MBI Data.xlsx", sheet = 1)
mbi
colnames(mbi) <- c('RID', 'visit_code', 'MBI_Motivation', 'MBI_Affect', 'MBI_Impulse', 'MBI_Impulse', 'MBI_Social_Int', 'MBI_Abnormal_Per', 'MBI_Total', 'gender', 'dob_month', 'dob_year', 'educ')
colnames(mbi) <- c('RID', 'visit_code', 'MBI_Motivation', 'MBI_Affect', 'MBI_Impulse', 'MBI_Social_Int', 'MBI_Abnormal_Per', 'MBI_Total', 'gender', 'dob_month', 'dob_year', 'educ')
mbi
test <- group(mbi, RID)
test <- group_by(mbi, RID)
test
?spread
df <- data.frame(x = c("a", "b"), y = c(3, 4), z = c(5, 6))
df
df %>% spread(x, y) %>% gather(x, y, a:b, na.rm = TRUE)
df %>% spread(x, y)
spread(mbi, visit_code, MBI_Motivation)
spread(mbi, MBI_Motivation, visit_code)
spread(mbi, visit_code, MBI_Affect)
spread(mbi, visit_code, MBI_Affect, MBI_Motivation)
spread(mbi, visit_code, c(MBI_Affect, MBI_Motivation))
spread(mbi, visit_code, c('MBI_Affect', 'MBI_Motivation'))
stocksm %>% spread(stock, price)
stocksm <- stocks %>% gather(stock, price, -time)
stocksm %>% spread(stock, price)
stocksm %>% spread(time, price)
stocksm <- stocks %>% gather(stock, price, -time)
mbi
mbi %>%
select(RID, visit_code, MBI_Motivation)
spread(visit_code, MBI_Affect)
mbi %>%
select(RID, visit_code, MBI_Motivation) %>%
spread(visit_code, MBI_Affect)
mbi %>%
select(RID, visit_code, MBI_Motivation) %>%
spread(visit_code, MBI_Motivation)
mbi %>%
select(RID, visit_code, MBI_Motivation) %>%
spread(visit_code, MBI_Motivation) %>%
mutate(MBI_Motivation = ifelse(bl > 1 & m06 > 1, 1, 0))
test <- mbi %>%
select(RID, visit_code, MBI_Motivation) %>%
spread(visit_code, MBI_Motivation) %>%
mutate(MBI_Motivation = ifelse(bl > 1 & m06 > 1, 1, 0))
test
count(test, MBI_Motivation)
print(test, n = Inf)
test <- mbi %>%
select(RID, visit_code, MBI_Motivation) %>%
spread(visit_code, MBI_Motivation) %>%
mutate(MBI_Motivation = ifelse(bl > 0 & m06 > 0, 1, 0))
test
count(test, MBI_Motivation)
MBI_Motivation <- mbi %>%
select(RID, visit_code, MBI_Motivation) %>%
spread(visit_code, MBI_Motivation) %>%
mutate(MBI_Motivation = ifelse(bl > 0 & m06 > 0, 1, 0)) %>%
select(RID, MBI_Motivation)
MBI_Affect <- mbi %>%
select(RID, visit_code, MBI_Affect) %>%
spread(visit_code, MBI_Affect) %>%
mutate(MBI_Affect = ifelse(bl > 0 & m06 > 0, 1, 0)) %>%
select(RID, MBI_Affect)
MBI_Affect
source('~/.active-rstudio-document', echo=TRUE)
MBI_Impulse
MBI_Affect
MBI_Social_Int
MBI_Abnormal_Per
268+173
MBI_Motivation %>%
left_join(MBI_Affect, by = 'RID') %>%
left_join(MBI_Impulse, by = 'RID') %>%
left_join(MBI_Social_Int, by = 'RID') %>%
left_join(MBI_Abnormal_Per, by = 'RID')
MBI_Motivation <- mbi %>%
select(RID, visit_code, MBI_Motivation) %>%
spread(visit_code, MBI_Motivation) %>%
mutate(MBI_Motivation = ifelse(bl > 0 & m06 > 0, 1, 0)) %>%
select(RID, MBI_Motivation)
MBI_Affect <- mbi %>%
select(RID, visit_code, MBI_Affect) %>%
spread(visit_code, MBI_Affect) %>%
mutate(MBI_Affect = ifelse(bl > 0 & m06 > 0, 1, 0)) %>%
select(RID, MBI_Affect)
MBI_Impulse <- mbi %>%
select(RID, visit_code, MBI_Impulse) %>%
spread(visit_code, MBI_Impulse) %>%
mutate(MBI_Impulse = ifelse(bl > 0 & m06 > 0, 1, 0)) %>%
select(RID, MBI_Impulse)
MBI_Social_Int <- mbi %>%
select(RID, visit_code, MBI_Social_Int) %>%
spread(visit_code, MBI_Social_Int) %>%
mutate(MBI_Social_Int = ifelse(bl > 0 & m06 > 0, 1, 0)) %>%
select(RID, MBI_Social_Int)
MBI_Abnormal_Per <- mbi %>%
select(RID, visit_code, MBI_Abnormal_Per) %>%
spread(visit_code, MBI_Abnormal_Per) %>%
mutate(MBI_Abnormal_Per = ifelse(bl > 0 & m06 > 0, 1, 0)) %>%
select(RID, MBI_Abnormal_Per)
MBI_Motivation %>%
left_join(MBI_Affect, by = 'RID') %>%
left_join(MBI_Impulse, by = 'RID') %>%
left_join(MBI_Social_Int, by = 'RID') %>%
left_join(MBI_Abnormal_Per, by = 'RID')
MBI_Motivation
mbi.out <- MBI_Motivation %>%
left_join(MBI_Affect, by = 'RID') %>%
left_join(MBI_Impulse, by = 'RID') %>%
left_join(MBI_Social_Int, by = 'RID') %>%
left_join(MBI_Abnormal_Per, by = 'RID')
mbi.out
summary(mbi.out)
summaryize(mbi.out)
summarize(mbi.out)
?summarize
plyr::summarize(mbi.out)
library(magrittr)
mbi.out %<>%
mutate_each_(funs(factor(.)),cols)
mbi.out %<>%
mutate_all(funs(factor(.)),cols)
mbi.out %<>%
mutate_at(funs(factor(.)),cols)
cols <- colnames(mbi.out)
cols
mbi.out %<>%
mutate_at(funs(factor(.)),cols)
mbi.out %>%
mutate_if(is.numeric,funs(factor(.)))
mbi.out
mbi.out <- MBI_Motivation %>%
left_join(MBI_Affect, by = 'RID') %>%
left_join(MBI_Impulse, by = 'RID') %>%
left_join(MBI_Social_Int, by = 'RID') %>%
left_join(MBI_Abnormal_Per, by = 'RID') %>%
mutate_if(is.numeric,funs(factor(.)))
summary(mbi.out)
adni <- read_csv('/Users/sheaandrews/Dropbox/Research/Collaboration/MitoWAX/Data/Phenotypes/ADNIMERGE.csv')
adni
adni <- read_csv('/Users/sheaandrews/Dropbox/Research/Collaboration/MitoWAX/Data/Phenotypes/ADNIMERGE.csv') %>%
filter(VISCODE == 'bl')
adni
adni %>%
select(RID, COLPROT, DX_bl, AGE, PTGENDER, PTEDUCAT, APOE4) %>%
left_join(mbi.out, by = 'RID')
mbi.out <- MBI_Motivation %>%
left_join(MBI_Affect, by = 'RID') %>%
left_join(MBI_Impulse, by = 'RID') %>%
left_join(MBI_Social_Int, by = 'RID') %>%
left_join(MBI_Abnormal_Per, by = 'RID')
adni %>%
select(RID, COLPROT, DX_bl, AGE, PTGENDER, PTEDUCAT, APOE4) %>%
left_join(mbi.out, by = 'RID')
adni.out <- adni %>%
select(RID, COLPROT, DX_bl, AGE, PTGENDER, PTEDUCAT, APOE4) %>%
left_join(mbi.out, by = 'RID')
adni.out
print(adni.out, n = Inf)
head(MT_haps.out)
MT_haps.out[[-`BDCHP-1X10-HUMANHAP240S_11216501_A-b37`]]
MT_haps.out[[-'BDCHP-1X10-HUMANHAP240S_11216501_A-b37']]
MT_haps.out[[,-'BDCHP-1X10-HUMANHAP240S_11216501_A-b37']]
MT_haps.out[['BDCHP-1X10-HUMANHAP240S_11216501_A-b37']]
MT_haps[-'BDCHP-1X10-HUMANHAP240S_11216501_A-b37']
MT_haps[MT_haps == 'BDCHP-1X10-HUMANHAP240S_11216501_A-b37']
MT_haps[names(MT_haps) == 'BDCHP-1X10-HUMANHAP240S_11216501_A-b37']
MT_haps[[names(MT_haps) == 'BDCHP-1X10-HUMANHAP240S_11216501_A-b37']]
length(MT_haps)
test <- MT_haps[[imp.names$platform]]
imp.names$platform
test <- MT_haps[imp.names$platform]
length(test)
MT_haps <- MT_haps.out[imp.names$platform]
?merge.ist
?merge.list
library(taRifx)
?merge.list
imp.info <- lapply(info.dat, function(x){
out <- mutate(x, info_comb = ifelse(info_type0 == -1, info,info_type0 ))
out <- mutate(out, himc = ifelse(position %in% c(825, 1018, 1438, 1719, 1736, 2092, 3505, 3552, 3594, 4580, 4769, 4917, 4977, 5178, 5442, 6371, 7028, 8251, 8414, 8468, 8703, 9042, 9055, 9347, 9950, 10115, 10398, 10398, 10400, 10550, 11177, 11251, 11947, 12007, 12308, 12705, 13263, 13368, 13506, 13708, 13789, 14178, 14318, 14470, 14560, 14668, 14766, 15043, 15326, 15452, 15535, 16111, 16189, 16391), 'yes', 'no'))
out
})
test <- merge.list(MT_haps, imp.dat, imp.info)
test[[1]]
length(test)
test
test <- merge.list(MT_haps[[1]], imp.dat[[1]], imp.info[[1]])
test
MT_haps[[1:2]]
MT_haps
x <- list( A=list(p=runif(5)), B=list(q=runif(5)) )
y <- list( A=list(r=runif(5)), C=list(s=runif(5)) )
x
t
y
merge.list(x,y)
class(MT_haps)
test1 <- MT_haps[[1:2]]
test1
test <- merge.list(MT_haps[[1,2]], imp.dat[[1]], imp.info[[1]])
MT_haps[[c(1,2)]]
MT_haps[c(1,2)]
merge.list(MT_haps[c(1,2)], imp.dat[c(1,2)], imp.info[c(1,2)])
test <- merge.list(MT_haps[c(1,2)], imp.dat[c(1,2)])
test
saveRDS(MT_haps, "~/Dropbox/Research/PostDoc-MSSM/3_mitoWAX/3_Scripts/ShinnyApp/MT_haps.rds")
saveRDS(imp.dat, "~/Dropbox/Research/PostDoc-MSSM/3_mitoWAX/3_Scripts/ShinnyApp/imp.dat.rds")
saveRDS(imp.info, "~/Dropbox/Research/PostDoc-MSSM/3_mitoWAX/3_Scripts/ShinnyApp/imp.info.rds")
MT_haps <- readRDS("~/Dropbox/Research/PostDoc-MSSM/3_mitoWAX/3_Scripts/ShinnyApp/MT_haps.rds")
imp.info <- readRDS("~/Dropbox/Research/PostDoc-MSSM/3_mitoWAX/3_Scripts/ShinnyApp/imp.info.rds")
imp.dat <- readRDS("~/Dropbox/Research/PostDoc-MSSM/3_mitoWAX/3_Scripts/ShinnyApp/imp.dat.rds")
imp.info
imp.info[['GSA-24v1-0_A2-b37']]
625 - 512
runApp('~/Dropbox/Research/PostDoc-MSSM/3_mitoWAX/3_Scripts/ShinnyApp/ShinnyApp.R')
MT_haps[[1]]
rm.info <- filter(imp.info[['GSA-24v1-0_A2-b37']], info > info.cut)
info.cut = 0.3
rm.info <- filter(imp.info[['GSA-24v1-0_A2-b37']], info > info.cut)
rm.info
imp.info[['GSA-24v1-0_A2-b37']]
test <-  imp.dat[['GSA-24v1-0_A2-b37']][ ,colnames(my_data[['GSA-24v1-0_A2-b37']]) %in% c('Individual', rm.info$position)]
imp.dat[['GSA-24v1-0_A2-b37']]
test <-  imp.dat[['GSA-24v1-0_A2-b37']][ ,colnames(imp.dat[['GSA-24v1-0_A2-b37']]) %in% c('Individual', rm.info$position)]
test
runApp('~/Dropbox/Research/PostDoc-MSSM/3_mitoWAX/3_Scripts/ShinnyApp/ShinnyApp.R')
MT_haps <- readRDS("~/Dropbox/Research/PostDoc-MSSM/3_mitoWAX/3_Scripts/ShinnyApp/MT_haps.rds")
imp.info <- readRDS("~/Dropbox/Research/PostDoc-MSSM/3_mitoWAX/3_Scripts/ShinnyApp/imp.info.rds")
imp.dat <- readRDS("~/Dropbox/Research/PostDoc-MSSM/3_mitoWAX/3_Scripts/ShinnyApp/imp.dat.rds")
rm.info <- filter(imp.info[['GSA-24v1-0_A2-b37']], info > info.cut)
info.cut = 0.3
rm.info <- filter(imp.info[['GSA-24v1-0_A2-b37']], info > info.cut)
imp.dat_filt <- imp.dat[['GSA-24v1-0_A2-b37']][ ,colnames(imp.dat[['GSA-24v1-0_A2-b37']]) %in%
c('Individual', rm.info$position)]
## Assign haplogroups
MTimp.classifications <- HiMC::getClassifications(imp.dat_filt)
imp.dat_filt
data(nodes)
## Assign haplogroups
MTimp.classifications <- HiMC::getClassifications(imp.dat_filt)
## Assign haplogroups
MTimp.classifications <- HiMC::getClassifications(as.data.frame(imp.dat_filt))
runApp('~/Dropbox/Research/PostDoc-MSSM/3_mitoWAX/3_Scripts/ShinnyApp/ShinnyApp.R')
imp.names
imp.map <- list.files(path = "~/Dropbox/STRANDS", recursive = TRUE, pattern = "*imputed.map")
imp.ped <- list.files(path = "~/Dropbox/STRANDS", recursive = TRUE, pattern = "*imputed.ped")
imp.names <- imp.map %>% as.tibble() %>% separate(value, c('platform', 'file'), sep = '/')
imp.names
write_delim(imp.names, ~/Desktop/platform.names)
write_delim(imp.names, '~/Desktop/platform.names')
runApp('~/Dropbox/Research/PostDoc-MSSM/3_mitoWAX/3_Scripts/ShinnyApp/ShinnyApp.R')
runApp('~/Dropbox/Research/PostDoc-MSSM/3_mitoWAX/3_Scripts/ShinnyApp/ShinnyApp.R')
imp.info <- readRDS("~/Dropbox/Research/PostDoc-MSSM/3_mitoWAX/3_Scripts/ShinnyApp/imp.info.rds")
imp.info[['GSA-24v1-0_A2-b37']]
imp.info[['GSA-24v1-0_A2-b37']] %>%
select(position, a0, a1, exp_freq_a1, info, type, info_type0, himc)
runApp('~/Dropbox/Research/PostDoc-MSSM/3_mitoWAX/3_Scripts/ShinnyApp/ShinnyApp.R')
runApp('~/Dropbox/Research/PostDoc-MSSM/3_mitoWAX/3_Scripts/ShinnyApp/ShinnyApp.R')
hap.match <- MT_haps[['GSA-24v1-0_A2-b37']] %>%
count(haplogroup_typ, haplogroup_wgs) %>%
mutate(match = haplogroup_typ == haplogroup_wgs)
hap.match
sum(hap.match$n)
hap.match <- MT_haps[['GSA-24v1-0_A2-b37']] %>%
count(haplogroup_typ, haplogroup_wgs) %>%
mutate(perc = n/sum(n)) %>%
mutate(match = haplogroup_typ == haplogroup_wgs)
hap.match
hap.match <- MT_haps[['GSA-24v1-0_A2-b37']] %>%
count(haplogroup_typ, haplogroup_wgs) %>%
mutate(perc = (n/sum(n))*100) %>%
mutate(match = haplogroup_typ == haplogroup_wgs)
hap.match
runApp('~/Dropbox/Research/PostDoc-MSSM/3_mitoWAX/3_Scripts/ShinnyApp/ShinnyApp.R')
